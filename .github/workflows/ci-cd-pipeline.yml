name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 깃허브 저장소 코드 체크아웃
        uses: actions/checkout@v3

      - name: package.json에서 앱 이름 가져오기
        id: packagejson
        run: |
          APP_NAME=$(jq -r .name package.json)
          echo "App name: $APP_NAME"
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v2

      - name: DockerHub에 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 도커 이미지 빌드 및 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ steps.packagejson.outputs.app_name }}:latest

      - name: deployment.yaml 파일 준비
        run: |
          sed -i "s/\${DOCKER_USERNAME}/${{ secrets.DOCKER_USERNAME }}/g" deployment.yaml
          sed -i "s/\${APP_NAME}/${{ steps.packagejson.outputs.app_name }}/g" deployment.yaml

      - name: deployment.yaml 파일 경로 및 내용 디버깅
        run: |
          echo "The absolute path of deployment.yaml is: $(pwd)/deployment.yaml"
          echo "Content of deployment.yaml:"
          cat deployment.yaml

      - name: deployment.yaml 파일을 원격 서버로 복사
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SCOUTER01_SSH_HOST }}
          username: ${{ secrets.SCOUTER01_SSH_USERNAME }}
          key: ${{ secrets.YUSU_SSH_KEY }}
          port: ${{ secrets.SCOUTER01_SSH_PORT }}
          source: "deployment.yaml"
          target: "/tmp"

      - name: SSH를 통해 Kubernetes에 배포 및 롤아웃 재시작
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SCOUTER01_SSH_HOST }}
          username: ${{ secrets.SCOUTER01_SSH_USERNAME }}
          key: ${{ secrets.YUSU_SSH_KEY }}
          port: ${{ secrets.SCOUTER01_SSH_PORT }}
          script: |
            DEPLOYMENT_NAME=$(awk '/metadata:/{flag=1;next}/spec:/{flag=0}flag && /name:/{print $2;exit}' /tmp/deployment.yaml)
            echo "Deployment name extracted: $DEPLOYMENT_NAME"
            kubectl apply -f /tmp/deployment.yaml
            kubectl rollout restart deployment $DEPLOYMENT_NAME
    
